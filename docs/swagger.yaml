definitions:
  collection.LoginInfo:
    properties:
      channel:
        type: integer
      channel_user_id:
        description: user id of the channel
        type: string
      device:
        description: iPhoneN, PixelN, NoteN, ...
        type: string
      os:
        type: integer
    required:
    - device
    - os
    type: object
  collection.Token:
    properties:
      access_token:
        type: string
      id:
        type: string
      refresh_token:
        type: string
    type: object
  collection.User:
    properties:
      basic_info:
        $ref: '#/definitions/collection.UserInfo'
      email:
        example: username@mail.com
        type: string
      last_update:
        description: unix time in second
        type: integer
      login_info:
        $ref: '#/definitions/collection.LoginInfo'
      mobile:
        description: "+886987654321"
        example: "+886987654321"
        type: string
      status:
        type: integer
    type: object
  collection.UserInfo:
    properties:
      Avatar:
        description: s3 object url
        type: string
      bio:
        type: string
      birthday:
        type: integer
      gender:
        description: configable?
        type: integer
      hobbies:
        items:
          type: string
        type: array
      nick_name:
        type: string
      profile_pictures:
        items:
          type: string
        type: array
    required:
    - nick_name
    type: object
  handler.hello:
    properties:
      message:
        example: Hello
        type: string
      timestamp:
        example: "2021-07-24T20:01:25.874565+08:00"
        type: string
    type: object
  t7Error.Error:
    properties:
      code:
        type: string
      detail:
        type: string
      message:
        type: string
    type: object
info:
  contact: {}
  description: API Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Backend API
  version: "1.0"
paths:
  /:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.hello'
      summary: Hello Page
      tags:
      - Hello
  /admin/v1/user:
    post:
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/collection.User'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Create user
      tags:
      - v1
      - user
      - admin
  /admin/v1/users:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Delete user
      tags:
      - user
  /api/v1/users/{UserId}:
    get:
      parameters:
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/collection.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Get user Info
      tags:
      - v1
      - user
    put:
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User basic info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/collection.UserInfo'
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Update user
      tags:
      - user
  /api/v1/users/{UserId}/token:
    put:
      parameters:
      - description: Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/collection.Token'
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/collection.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Refresh access token
      tags:
      - v1
      - token
swagger: "2.0"
