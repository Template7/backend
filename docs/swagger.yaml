definitions:
  handler.createUserResp:
    properties:
      user_id:
        type: string
    type: object
  handler.hello:
    properties:
      message:
        example: Hello
        type: string
      timestamp:
        example: "2021-07-24T20:01:25.874565+08:00"
        type: string
    type: object
  sms.Confirm:
    properties:
      code:
        example: "1234567"
        type: string
      mobile:
        example: "+886987654321"
        type: string
    required:
    - code
    - mobile
    type: object
  sms.Request:
    properties:
      mobile:
        example: "+886987654321"
        type: string
    required:
    - mobile
    type: object
  structs.Gender:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-comments:
      GenderGay: distinguish 0 and 1 ?
      GenderLesbian: distinguish 0 and 1 ?
    x-enum-varnames:
    - GenderUnknown
    - GenderMale
    - GenderFemale
    - GenderGay
    - GenderLesbian
  structs.LoginChannel:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - LoginChannelUnknown
    - LoginChannelMobile
    - LoginChannelFacebook
    - LoginChannelGoogle
  structs.LoginClientOs:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - LoginClientOsUnknown
    - LoginClientOsIos
    - LoginClientOsAndroid
  structs.LoginInfo:
    properties:
      channel:
        allOf:
        - $ref: '#/definitions/structs.LoginChannel'
        enum:
        - 0
        - 1
        - 2
        - 3
      channel_user_id:
        description: user id of the channel
        type: string
      device:
        description: iPhoneN, PixelN, NoteN, ...
        type: string
      os:
        allOf:
        - $ref: '#/definitions/structs.LoginClientOs'
        enum:
        - 0
        - 1
        - 2
    required:
    - device
    type: object
  structs.Token:
    properties:
      access_token:
        type: string
      id:
        type: string
      refresh_token:
        type: string
    type: object
  structs.User:
    properties:
      basic_info:
        $ref: '#/definitions/structs.UserInfo'
      email:
        example: username@mail.com
        type: string
      last_update:
        description: unix time in second
        type: integer
      login_info:
        $ref: '#/definitions/structs.LoginInfo'
      mobile:
        description: "+886987654321"
        example: "+886987654321"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/structs.UserStatus'
        enum:
        - -1
        - 0
        - 1
      user_id:
        type: string
    type: object
  structs.UserInfo:
    properties:
      Avatar:
        description: s3 object url
        type: string
      bio:
        type: string
      birthday:
        type: integer
      gender:
        allOf:
        - $ref: '#/definitions/structs.Gender'
        description: configable?
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      hobbies:
        items:
          type: string
        type: array
      nick_name:
        type: string
      profile_pictures:
        items:
          type: string
        type: array
    required:
    - nick_name
    type: object
  structs.UserStatus:
    enum:
    - -1
    - 0
    - 1
    type: integer
    x-enum-comments:
      UserStatusActivate: sign up finished, able to use the app
      UserStatusInitialized: not finish basic info yet
    x-enum-varnames:
    - UserStatusBlock
    - UserStatusInitialized
    - UserStatusActivate
  t7Error.Code:
    enum:
    - 1024
    - 1025
    - 1026
    - 1027
    - 1028
    - 1029
    - 1030
    - 1031
    - 1032
    - 1033
    - 1034
    - 1035
    - 1036
    - 1037
    - 1038
    - 1039
    - 1040
    - 1041
    - 1042
    type: integer
    x-enum-varnames:
    - codeUnAuthorized
    - codeInvalidBody
    - codeDbConnectionFail
    - codeDbOperationFail
    - codeInvalidDocumentId
    - codeHttpOperationFail
    - codeHttpUnexpectedResponseCode
    - codeHashFail
    - codeUserNotfound
    - codeUserAlreadyExist
    - codeSignInFail
    - codeVerifyCodeExpired
    - codeIncorrectVerifyCode
    - codeRedisOperationFail
    - codeTokenSignFail
    - codeTokenAssertionFail
    - codeInvalidToken
    - codeDecodeFail
    - codeWalletNotFound
  t7Error.Error:
    properties:
      code:
        allOf:
        - $ref: '#/definitions/t7Error.Code'
        example: 1024
      detail:
        example: empty token
        type: string
      message:
        example: token unauthorized
        type: string
      type:
        allOf:
        - $ref: '#/definitions/t7Error.Type'
        example: 32
    type: object
  t7Error.Type:
    enum:
    - 32
    - 33
    - 34
    - 35
    - 36
    type: integer
    x-enum-varnames:
    - typeAuth
    - typeInvalidData
    - typeDb
    - typeRedis
    - typeNetwork
  user.CreateUserReq:
    properties:
      email:
        example: username@mail.com
        type: string
      mobile:
        description: "+886987654321"
        example: "+886987654321"
        type: string
    type: object
info:
  contact: {}
  description: API Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Backend API
  version: "1.0"
paths:
  /:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.hello'
      summary: Hello Page
      tags:
      - Hello
  /admin/v1/user:
    post:
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: User object
          schema:
            $ref: '#/definitions/handler.createUserResp'
        "400":
          description: Error object
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Error object
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Create user
      tags:
      - V1
      - User
      - Admin
  /api/v1/sign-in/mobile:
    post:
      parameters:
      - description: Sms confirm
        in: body
        name: smsConfirm
        required: true
        schema:
          $ref: '#/definitions/sms.Confirm'
      produces:
      - application/json
      responses:
        "200":
          description: Token object
          schema:
            $ref: '#/definitions/structs.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Mobile sign in
      tags:
      - v1
      - SignIn
      - Sms
  /api/v1/sign-up/mobile:
    post:
      parameters:
      - description: Sms confirm
        in: body
        name: smsConfirm
        required: true
        schema:
          $ref: '#/definitions/sms.Confirm'
      produces:
      - application/json
      responses:
        "200":
          description: Token object
          schema:
            $ref: '#/definitions/structs.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Confirm verify code
      tags:
      - Sms
      - SignUp
  /api/v1/users/{UserId}:
    get:
      parameters:
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Get user Info
      tags:
      - V1
      - User
    put:
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User basic info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/structs.UserInfo'
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Update user
      tags:
      - V1
      - User
  /api/v1/users/{UserId}/token:
    put:
      parameters:
      - description: Token object
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/structs.Token'
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: Token object
          schema:
            $ref: '#/definitions/structs.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Refresh access token
      tags:
      - V1
      - Token
  /api/v1/verify-code/sms:
    post:
      parameters:
      - description: Sms request
        in: body
        name: smsRequest
        required: true
        schema:
          $ref: '#/definitions/sms.Request'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/t7Error.Error'
      summary: Send verify code to the user mobile
      tags:
      - Sms
swagger: "2.0"
